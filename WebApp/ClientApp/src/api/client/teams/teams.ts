/**
 * Generated by orval v6.11.1 🍺
 * Do not edit manually.
 * WebApp
 * OpenAPI spec version: v1
 */
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  IndexTeamsResponse,
  GetApiTeamsParams,
  ViewTeamResponse,
  ProblemDetails,
  CreateTeamRequest,
  UpdateTeamRequest,
  PostApiTeamsInviteUserIdParams,
  PostApiTeamsJoinParams
} from '.././model'
import { useCustomClient } from '.././customClient';
import type { ErrorType, BodyType } from '.././customClient';


export const useGetApiTeamsHook = () => {
        const getApiTeams = useCustomClient<IndexTeamsResponse[]>();

        return (
    params?: GetApiTeamsParams,
 signal?: AbortSignal
) => {
        return getApiTeams(
          {url: `/Api/Teams`, method: 'get',
        params, signal
    },
          );
        }
      }
    

export const getGetApiTeamsQueryKey = (params?: GetApiTeamsParams,) => [`/Api/Teams`, ...(params ? [params]: [])];

    
export type GetApiTeamsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiTeamsHook>>>>
export type GetApiTeamsQueryError = ErrorType<unknown>

export const useGetApiTeams = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiTeamsHook>>>, TError = ErrorType<unknown>>(
 params?: GetApiTeamsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiTeamsHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTeamsQueryKey(params);

  const getApiTeams =  useGetApiTeamsHook();


  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiTeamsHook>>>> = ({ signal }) => getApiTeams(params, signal);


  

  const query = useQuery<Awaited<ReturnType<ReturnType<typeof useGetApiTeamsHook>>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const usePostApiTeamsHook = () => {
        const postApiTeams = useCustomClient<ViewTeamResponse>();

        return (
    createTeamRequest: BodyType<CreateTeamRequest>,
 ) => {
        return postApiTeams(
          {url: `/Api/Teams`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createTeamRequest
    },
          );
        }
      }
    


    export type PostApiTeamsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiTeamsHook>>>>
    export type PostApiTeamsMutationBody = BodyType<CreateTeamRequest>
    export type PostApiTeamsMutationError = ErrorType<ProblemDetails>

    export const usePostApiTeams = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiTeamsHook>>>, TError,{data: BodyType<CreateTeamRequest>}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      const postApiTeams =  usePostApiTeamsHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiTeamsHook>>>, {data: BodyType<CreateTeamRequest>}> = (props) => {
          const {data} = props ?? {};

          return  postApiTeams(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof postApiTeams>>, TError, {data: BodyType<CreateTeamRequest>}, TContext>(mutationFn, mutationOptions);
    }
    export const useGetApiTeamsIdHook = () => {
        const getApiTeamsId = useCustomClient<ViewTeamResponse>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return getApiTeamsId(
          {url: `/Api/Teams/${id}`, method: 'get', signal
    },
          );
        }
      }
    

export const getGetApiTeamsIdQueryKey = (id: number,) => [`/Api/Teams/${id}`];

    
export type GetApiTeamsIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiTeamsIdHook>>>>
export type GetApiTeamsIdQueryError = ErrorType<ProblemDetails>

export const useGetApiTeamsId = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiTeamsIdHook>>>, TError = ErrorType<ProblemDetails>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiTeamsIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiTeamsIdQueryKey(id);

  const getApiTeamsId =  useGetApiTeamsIdHook();


  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiTeamsIdHook>>>> = ({ signal }) => getApiTeamsId(id, signal);


  

  const query = useQuery<Awaited<ReturnType<ReturnType<typeof useGetApiTeamsIdHook>>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const usePatchApiTeamsIdHook = () => {
        const patchApiTeamsId = useCustomClient<void>();

        return (
    id: number,
    updateTeamRequest: BodyType<UpdateTeamRequest>,
 ) => {
        return patchApiTeamsId(
          {url: `/Api/Teams/${id}`, method: 'patch',
      headers: {'Content-Type': 'application/json', },
      data: updateTeamRequest
    },
          );
        }
      }
    


    export type PatchApiTeamsIdMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePatchApiTeamsIdHook>>>>
    export type PatchApiTeamsIdMutationBody = BodyType<UpdateTeamRequest>
    export type PatchApiTeamsIdMutationError = ErrorType<ProblemDetails>

    export const usePatchApiTeamsId = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePatchApiTeamsIdHook>>>, TError,{id: number;data: BodyType<UpdateTeamRequest>}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      const patchApiTeamsId =  usePatchApiTeamsIdHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePatchApiTeamsIdHook>>>, {id: number;data: BodyType<UpdateTeamRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  patchApiTeamsId(id,data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof patchApiTeamsId>>, TError, {id: number;data: BodyType<UpdateTeamRequest>}, TContext>(mutationFn, mutationOptions);
    }
    export const useDeleteApiTeamsIdHook = () => {
        const deleteApiTeamsId = useCustomClient<void>();

        return (
    id: number,
 ) => {
        return deleteApiTeamsId(
          {url: `/Api/Teams/${id}`, method: 'delete'
    },
          );
        }
      }
    


    export type DeleteApiTeamsIdMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteApiTeamsIdHook>>>>
    
    export type DeleteApiTeamsIdMutationError = ErrorType<ProblemDetails>

    export const useDeleteApiTeamsId = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteApiTeamsIdHook>>>, TError,{id: number}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      const deleteApiTeamsId =  useDeleteApiTeamsIdHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeleteApiTeamsIdHook>>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiTeamsId(id,)
        }

        

      return useMutation<Awaited<ReturnType<typeof deleteApiTeamsId>>, TError, {id: number}, TContext>(mutationFn, mutationOptions);
    }
    export const usePostApiTeamsLeaveHook = () => {
        const postApiTeamsLeave = useCustomClient<void>();

        return (
    
 ) => {
        return postApiTeamsLeave(
          {url: `/Api/Teams/Leave`, method: 'post'
    },
          );
        }
      }
    


    export type PostApiTeamsLeaveMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiTeamsLeaveHook>>>>
    
    export type PostApiTeamsLeaveMutationError = ErrorType<ProblemDetails>

    export const usePostApiTeamsLeave = <TError = ErrorType<ProblemDetails>,
    TVariables = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiTeamsLeaveHook>>>, TError,TVariables, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      const postApiTeamsLeave =  usePostApiTeamsLeaveHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiTeamsLeaveHook>>>, TVariables> = () => {
          

          return  postApiTeamsLeave()
        }

        

      return useMutation<Awaited<ReturnType<typeof postApiTeamsLeave>>, TError, TVariables, TContext>(mutationFn, mutationOptions);
    }
    export const usePostApiTeamsInviteUserIdHook = () => {
        const postApiTeamsInviteUserId = useCustomClient<void>();

        return (
    userId: string,
    params?: PostApiTeamsInviteUserIdParams,
 ) => {
        return postApiTeamsInviteUserId(
          {url: `/Api/Teams/Invite/${userId}`, method: 'post',
        params
    },
          );
        }
      }
    


    export type PostApiTeamsInviteUserIdMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiTeamsInviteUserIdHook>>>>
    
    export type PostApiTeamsInviteUserIdMutationError = ErrorType<ProblemDetails>

    export const usePostApiTeamsInviteUserId = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiTeamsInviteUserIdHook>>>, TError,{userId: string;params?: PostApiTeamsInviteUserIdParams}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      const postApiTeamsInviteUserId =  usePostApiTeamsInviteUserIdHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiTeamsInviteUserIdHook>>>, {userId: string;params?: PostApiTeamsInviteUserIdParams}> = (props) => {
          const {userId,params} = props ?? {};

          return  postApiTeamsInviteUserId(userId,params,)
        }

        

      return useMutation<Awaited<ReturnType<typeof postApiTeamsInviteUserId>>, TError, {userId: string;params?: PostApiTeamsInviteUserIdParams}, TContext>(mutationFn, mutationOptions);
    }
    export const usePostApiTeamsJoinHook = () => {
        const postApiTeamsJoin = useCustomClient<void>();

        return (
    params?: PostApiTeamsJoinParams,
 ) => {
        return postApiTeamsJoin(
          {url: `/Api/Teams/Join`, method: 'post',
        params
    },
          );
        }
      }
    


    export type PostApiTeamsJoinMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiTeamsJoinHook>>>>
    
    export type PostApiTeamsJoinMutationError = ErrorType<ProblemDetails>

    export const usePostApiTeamsJoin = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiTeamsJoinHook>>>, TError,{params?: PostApiTeamsJoinParams}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      const postApiTeamsJoin =  usePostApiTeamsJoinHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiTeamsJoinHook>>>, {params?: PostApiTeamsJoinParams}> = (props) => {
          const {params} = props ?? {};

          return  postApiTeamsJoin(params,)
        }

        

      return useMutation<Awaited<ReturnType<typeof postApiTeamsJoin>>, TError, {params?: PostApiTeamsJoinParams}, TContext>(mutationFn, mutationOptions);
    }
    