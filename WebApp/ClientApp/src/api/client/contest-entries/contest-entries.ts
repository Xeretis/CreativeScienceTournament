/**
 * Generated by orval v6.11.1 🍺
 * Do not edit manually.
 * WebApp
 * OpenAPI spec version: v1
 */
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  IndexContestEntriesResponse,
  ProblemDetails,
  GetApiContestEntriesContestIdParams,
  ViewContestEntryResponse,
  PostApiContestEntriesContestIdBody
} from '.././model'
import { useCustomClient } from '.././customClient';
import type { ErrorType, BodyType } from '.././customClient';


export const useGetApiContestEntriesContestIdHook = () => {
        const getApiContestEntriesContestId = useCustomClient<IndexContestEntriesResponse[]>();

        return (
    contestId: number,
    params?: GetApiContestEntriesContestIdParams,
 signal?: AbortSignal
) => {
        return getApiContestEntriesContestId(
          {url: `/Api/ContestEntries/${contestId}`, method: 'get',
        params, signal
    },
          );
        }
      }
    

export const getGetApiContestEntriesContestIdQueryKey = (contestId: number,
    params?: GetApiContestEntriesContestIdParams,) => [`/Api/ContestEntries/${contestId}`, ...(params ? [params]: [])];

    
export type GetApiContestEntriesContestIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiContestEntriesContestIdHook>>>>
export type GetApiContestEntriesContestIdQueryError = ErrorType<ProblemDetails>

export const useGetApiContestEntriesContestId = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiContestEntriesContestIdHook>>>, TError = ErrorType<ProblemDetails>>(
 contestId: number,
    params?: GetApiContestEntriesContestIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiContestEntriesContestIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiContestEntriesContestIdQueryKey(contestId,params);

  const getApiContestEntriesContestId =  useGetApiContestEntriesContestIdHook();


  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiContestEntriesContestIdHook>>>> = ({ signal }) => getApiContestEntriesContestId(contestId,params, signal);


  

  const query = useQuery<Awaited<ReturnType<ReturnType<typeof useGetApiContestEntriesContestIdHook>>>, TError, TData>(queryKey, queryFn, {enabled: !!(contestId), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const usePostApiContestEntriesContestIdHook = () => {
        const postApiContestEntriesContestId = useCustomClient<ViewContestEntryResponse>();

        return (
    contestId: number,
    postApiContestEntriesContestIdBody: BodyType<PostApiContestEntriesContestIdBody>,
 ) => {const formData = new FormData();
formData.append('Solution', postApiContestEntriesContestIdBody.Solution)

        return postApiContestEntriesContestId(
          {url: `/Api/ContestEntries/${contestId}`, method: 'post',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
          );
        }
      }
    


    export type PostApiContestEntriesContestIdMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiContestEntriesContestIdHook>>>>
    export type PostApiContestEntriesContestIdMutationBody = BodyType<PostApiContestEntriesContestIdBody>
    export type PostApiContestEntriesContestIdMutationError = ErrorType<ProblemDetails>

    export const usePostApiContestEntriesContestId = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiContestEntriesContestIdHook>>>, TError,{contestId: number;data: BodyType<PostApiContestEntriesContestIdBody>}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      const postApiContestEntriesContestId =  usePostApiContestEntriesContestIdHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiContestEntriesContestIdHook>>>, {contestId: number;data: BodyType<PostApiContestEntriesContestIdBody>}> = (props) => {
          const {contestId,data} = props ?? {};

          return  postApiContestEntriesContestId(contestId,data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof postApiContestEntriesContestId>>, TError, {contestId: number;data: BodyType<PostApiContestEntriesContestIdBody>}, TContext>(mutationFn, mutationOptions);
    }
    export const useGetApiContestEntriesContestIdIdHook = () => {
        const getApiContestEntriesContestIdId = useCustomClient<ViewContestEntryResponse>();

        return (
    contestId: number,
    id: number,
 signal?: AbortSignal
) => {
        return getApiContestEntriesContestIdId(
          {url: `/Api/ContestEntries/${contestId}/${id}`, method: 'get', signal
    },
          );
        }
      }
    

export const getGetApiContestEntriesContestIdIdQueryKey = (contestId: number,
    id: number,) => [`/Api/ContestEntries/${contestId}/${id}`];

    
export type GetApiContestEntriesContestIdIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiContestEntriesContestIdIdHook>>>>
export type GetApiContestEntriesContestIdIdQueryError = ErrorType<ProblemDetails>

export const useGetApiContestEntriesContestIdId = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiContestEntriesContestIdIdHook>>>, TError = ErrorType<ProblemDetails>>(
 contestId: number,
    id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiContestEntriesContestIdIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiContestEntriesContestIdIdQueryKey(contestId,id);

  const getApiContestEntriesContestIdId =  useGetApiContestEntriesContestIdIdHook();


  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiContestEntriesContestIdIdHook>>>> = ({ signal }) => getApiContestEntriesContestIdId(contestId,id, signal);


  

  const query = useQuery<Awaited<ReturnType<ReturnType<typeof useGetApiContestEntriesContestIdIdHook>>>, TError, TData>(queryKey, queryFn, {enabled: !!(contestId && id), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const useGetApiContestEntriesIdSolutionHook = () => {
        const getApiContestEntriesIdSolution = useCustomClient<void>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return getApiContestEntriesIdSolution(
          {url: `/Api/ContestEntries/${id}/Solution`, method: 'get', signal
    },
          );
        }
      }
    

export const getGetApiContestEntriesIdSolutionQueryKey = (id: number,) => [`/Api/ContestEntries/${id}/Solution`];

    
export type GetApiContestEntriesIdSolutionQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiContestEntriesIdSolutionHook>>>>
export type GetApiContestEntriesIdSolutionQueryError = ErrorType<ProblemDetails>

export const useGetApiContestEntriesIdSolution = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiContestEntriesIdSolutionHook>>>, TError = ErrorType<ProblemDetails>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiContestEntriesIdSolutionHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiContestEntriesIdSolutionQueryKey(id);

  const getApiContestEntriesIdSolution =  useGetApiContestEntriesIdSolutionHook();


  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiContestEntriesIdSolutionHook>>>> = ({ signal }) => getApiContestEntriesIdSolution(id, signal);


  

  const query = useQuery<Awaited<ReturnType<ReturnType<typeof useGetApiContestEntriesIdSolutionHook>>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const useGetApiContestEntriesContestIdOwnHook = () => {
        const getApiContestEntriesContestIdOwn = useCustomClient<ViewContestEntryResponse>();

        return (
    contestId: number,
 signal?: AbortSignal
) => {
        return getApiContestEntriesContestIdOwn(
          {url: `/Api/ContestEntries/${contestId}/Own`, method: 'get', signal
    },
          );
        }
      }
    

export const getGetApiContestEntriesContestIdOwnQueryKey = (contestId: number,) => [`/Api/ContestEntries/${contestId}/Own`];

    
export type GetApiContestEntriesContestIdOwnQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiContestEntriesContestIdOwnHook>>>>
export type GetApiContestEntriesContestIdOwnQueryError = ErrorType<ProblemDetails>

export const useGetApiContestEntriesContestIdOwn = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiContestEntriesContestIdOwnHook>>>, TError = ErrorType<ProblemDetails>>(
 contestId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiContestEntriesContestIdOwnHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiContestEntriesContestIdOwnQueryKey(contestId);

  const getApiContestEntriesContestIdOwn =  useGetApiContestEntriesContestIdOwnHook();


  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiContestEntriesContestIdOwnHook>>>> = ({ signal }) => getApiContestEntriesContestIdOwn(contestId, signal);


  

  const query = useQuery<Awaited<ReturnType<ReturnType<typeof useGetApiContestEntriesContestIdOwnHook>>>, TError, TData>(queryKey, queryFn, {enabled: !!(contestId), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const useDeleteApiContestEntriesContestIdOwnHook = () => {
        const deleteApiContestEntriesContestIdOwn = useCustomClient<void>();

        return (
    contestId: number,
 ) => {
        return deleteApiContestEntriesContestIdOwn(
          {url: `/Api/ContestEntries/${contestId}/Own`, method: 'delete'
    },
          );
        }
      }
    


    export type DeleteApiContestEntriesContestIdOwnMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteApiContestEntriesContestIdOwnHook>>>>
    
    export type DeleteApiContestEntriesContestIdOwnMutationError = ErrorType<ProblemDetails>

    export const useDeleteApiContestEntriesContestIdOwn = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteApiContestEntriesContestIdOwnHook>>>, TError,{contestId: number}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      const deleteApiContestEntriesContestIdOwn =  useDeleteApiContestEntriesContestIdOwnHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeleteApiContestEntriesContestIdOwnHook>>>, {contestId: number}> = (props) => {
          const {contestId} = props ?? {};

          return  deleteApiContestEntriesContestIdOwn(contestId,)
        }

        

      return useMutation<Awaited<ReturnType<typeof deleteApiContestEntriesContestIdOwn>>, TError, {contestId: number}, TContext>(mutationFn, mutationOptions);
    }
    export const useDeleteApiContestEntriesIdHook = () => {
        const deleteApiContestEntriesId = useCustomClient<void>();

        return (
    id: number,
 ) => {
        return deleteApiContestEntriesId(
          {url: `/Api/ContestEntries/${id}`, method: 'delete'
    },
          );
        }
      }
    


    export type DeleteApiContestEntriesIdMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteApiContestEntriesIdHook>>>>
    
    export type DeleteApiContestEntriesIdMutationError = ErrorType<ProblemDetails>

    export const useDeleteApiContestEntriesId = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteApiContestEntriesIdHook>>>, TError,{id: number}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      const deleteApiContestEntriesId =  useDeleteApiContestEntriesIdHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeleteApiContestEntriesIdHook>>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiContestEntriesId(id,)
        }

        

      return useMutation<Awaited<ReturnType<typeof deleteApiContestEntriesId>>, TError, {id: number}, TContext>(mutationFn, mutationOptions);
    }
    