/**
 * Generated by orval v6.11.1 🍺
 * Do not edit manually.
 * WebApp
 * OpenAPI spec version: v1
 */
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  IndexContestsResponse,
  GetApiContestsParams,
  ViewContestResponse,
  ProblemDetails,
  PostApiContestsBody,
  PatchApiContestsIdBody,
  ViewTeamStatusResponse
} from '.././model'
import { useCustomClient } from '.././customClient';
import type { ErrorType, BodyType } from '.././customClient';


export const useGetApiContestsHook = () => {
        const getApiContests = useCustomClient<IndexContestsResponse[]>();

        return (
    params?: GetApiContestsParams,
 signal?: AbortSignal
) => {
        return getApiContests(
          {url: `/Api/Contests`, method: 'get',
        params, signal
    },
          );
        }
      }
    

export const getGetApiContestsQueryKey = (params?: GetApiContestsParams,) => [`/Api/Contests`, ...(params ? [params]: [])];

    
export type GetApiContestsQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiContestsHook>>>>
export type GetApiContestsQueryError = ErrorType<unknown>

export const useGetApiContests = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiContestsHook>>>, TError = ErrorType<unknown>>(
 params?: GetApiContestsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiContestsHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiContestsQueryKey(params);

  const getApiContests =  useGetApiContestsHook();


  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiContestsHook>>>> = ({ signal }) => getApiContests(params, signal);


  

  const query = useQuery<Awaited<ReturnType<ReturnType<typeof useGetApiContestsHook>>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const usePostApiContestsHook = () => {
        const postApiContests = useCustomClient<ViewContestResponse>();

        return (
    postApiContestsBody: BodyType<PostApiContestsBody>,
 ) => {const formData = new FormData();
formData.append('Topic', postApiContestsBody.Topic)
formData.append('Description', postApiContestsBody.Description)
formData.append('MaxPoints', postApiContestsBody.MaxPoints.toString())
formData.append('Exercise', postApiContestsBody.Exercise)
if(postApiContestsBody.TopicHelp !== undefined) {
 formData.append('TopicHelp', postApiContestsBody.TopicHelp)
 }
if(postApiContestsBody.Thumbnail !== undefined) {
 formData.append('Thumbnail', postApiContestsBody.Thumbnail)
 }
formData.append('StartDate', postApiContestsBody.StartDate)
formData.append('EndDate', postApiContestsBody.EndDate)

        return postApiContests(
          {url: `/Api/Contests`, method: 'post',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
          );
        }
      }
    


    export type PostApiContestsMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiContestsHook>>>>
    export type PostApiContestsMutationBody = BodyType<PostApiContestsBody>
    export type PostApiContestsMutationError = ErrorType<ProblemDetails>

    export const usePostApiContests = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiContestsHook>>>, TError,{data: BodyType<PostApiContestsBody>}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      const postApiContests =  usePostApiContestsHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiContestsHook>>>, {data: BodyType<PostApiContestsBody>}> = (props) => {
          const {data} = props ?? {};

          return  postApiContests(data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof postApiContests>>, TError, {data: BodyType<PostApiContestsBody>}, TContext>(mutationFn, mutationOptions);
    }
    export const useGetApiContestsIdHook = () => {
        const getApiContestsId = useCustomClient<ViewContestResponse>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return getApiContestsId(
          {url: `/Api/Contests/${id}`, method: 'get', signal
    },
          );
        }
      }
    

export const getGetApiContestsIdQueryKey = (id: number,) => [`/Api/Contests/${id}`];

    
export type GetApiContestsIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiContestsIdHook>>>>
export type GetApiContestsIdQueryError = ErrorType<ProblemDetails>

export const useGetApiContestsId = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiContestsIdHook>>>, TError = ErrorType<ProblemDetails>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiContestsIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiContestsIdQueryKey(id);

  const getApiContestsId =  useGetApiContestsIdHook();


  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiContestsIdHook>>>> = ({ signal }) => getApiContestsId(id, signal);


  

  const query = useQuery<Awaited<ReturnType<ReturnType<typeof useGetApiContestsIdHook>>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const usePatchApiContestsIdHook = () => {
        const patchApiContestsId = useCustomClient<void>();

        return (
    id: number,
    patchApiContestsIdBody: BodyType<PatchApiContestsIdBody>,
 ) => {const formData = new FormData();
formData.append('Topic', patchApiContestsIdBody.Topic)
formData.append('Description', patchApiContestsIdBody.Description)
formData.append('MaxPoints', patchApiContestsIdBody.MaxPoints.toString())
if(patchApiContestsIdBody.Exercise !== undefined) {
 formData.append('Exercise', patchApiContestsIdBody.Exercise)
 }
if(patchApiContestsIdBody.TopicHelp !== undefined) {
 formData.append('TopicHelp', patchApiContestsIdBody.TopicHelp)
 }
if(patchApiContestsIdBody.Thumbnail !== undefined) {
 formData.append('Thumbnail', patchApiContestsIdBody.Thumbnail)
 }
formData.append('StartDate', patchApiContestsIdBody.StartDate)
formData.append('EndDate', patchApiContestsIdBody.EndDate)

        return patchApiContestsId(
          {url: `/Api/Contests/${id}`, method: 'patch',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
          );
        }
      }
    


    export type PatchApiContestsIdMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePatchApiContestsIdHook>>>>
    export type PatchApiContestsIdMutationBody = BodyType<PatchApiContestsIdBody>
    export type PatchApiContestsIdMutationError = ErrorType<ProblemDetails>

    export const usePatchApiContestsId = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePatchApiContestsIdHook>>>, TError,{id: number;data: BodyType<PatchApiContestsIdBody>}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      const patchApiContestsId =  usePatchApiContestsIdHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePatchApiContestsIdHook>>>, {id: number;data: BodyType<PatchApiContestsIdBody>}> = (props) => {
          const {id,data} = props ?? {};

          return  patchApiContestsId(id,data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof patchApiContestsId>>, TError, {id: number;data: BodyType<PatchApiContestsIdBody>}, TContext>(mutationFn, mutationOptions);
    }
    export const useDeleteApiContestsIdHook = () => {
        const deleteApiContestsId = useCustomClient<void>();

        return (
    id: number,
 ) => {
        return deleteApiContestsId(
          {url: `/Api/Contests/${id}`, method: 'delete'
    },
          );
        }
      }
    


    export type DeleteApiContestsIdMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteApiContestsIdHook>>>>
    
    export type DeleteApiContestsIdMutationError = ErrorType<ProblemDetails>

    export const useDeleteApiContestsId = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteApiContestsIdHook>>>, TError,{id: number}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      const deleteApiContestsId =  useDeleteApiContestsIdHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeleteApiContestsIdHook>>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiContestsId(id,)
        }

        

      return useMutation<Awaited<ReturnType<typeof deleteApiContestsId>>, TError, {id: number}, TContext>(mutationFn, mutationOptions);
    }
    export const usePostApiContestsIdJoinHook = () => {
        const postApiContestsIdJoin = useCustomClient<void>();

        return (
    id: number,
 ) => {
        return postApiContestsIdJoin(
          {url: `/Api/Contests/${id}/Join`, method: 'post'
    },
          );
        }
      }
    


    export type PostApiContestsIdJoinMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiContestsIdJoinHook>>>>
    
    export type PostApiContestsIdJoinMutationError = ErrorType<ProblemDetails>

    export const usePostApiContestsIdJoin = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiContestsIdJoinHook>>>, TError,{id: number}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      const postApiContestsIdJoin =  usePostApiContestsIdJoinHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiContestsIdJoinHook>>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  postApiContestsIdJoin(id,)
        }

        

      return useMutation<Awaited<ReturnType<typeof postApiContestsIdJoin>>, TError, {id: number}, TContext>(mutationFn, mutationOptions);
    }
    export const useDeleteApiContestsIdLeaveHook = () => {
        const deleteApiContestsIdLeave = useCustomClient<void>();

        return (
    id: number,
 ) => {
        return deleteApiContestsIdLeave(
          {url: `/Api/Contests/${id}/Leave`, method: 'delete'
    },
          );
        }
      }
    


    export type DeleteApiContestsIdLeaveMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useDeleteApiContestsIdLeaveHook>>>>
    
    export type DeleteApiContestsIdLeaveMutationError = ErrorType<ProblemDetails>

    export const useDeleteApiContestsIdLeave = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof useDeleteApiContestsIdLeaveHook>>>, TError,{id: number}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      const deleteApiContestsIdLeave =  useDeleteApiContestsIdLeaveHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof useDeleteApiContestsIdLeaveHook>>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiContestsIdLeave(id,)
        }

        

      return useMutation<Awaited<ReturnType<typeof deleteApiContestsIdLeave>>, TError, {id: number}, TContext>(mutationFn, mutationOptions);
    }
    export const useGetApiContestsIdTeamStatusHook = () => {
        const getApiContestsIdTeamStatus = useCustomClient<ViewTeamStatusResponse>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return getApiContestsIdTeamStatus(
          {url: `/Api/Contests/${id}/TeamStatus`, method: 'get', signal
    },
          );
        }
      }
    

export const getGetApiContestsIdTeamStatusQueryKey = (id: number,) => [`/Api/Contests/${id}/TeamStatus`];

    
export type GetApiContestsIdTeamStatusQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiContestsIdTeamStatusHook>>>>
export type GetApiContestsIdTeamStatusQueryError = ErrorType<ProblemDetails>

export const useGetApiContestsIdTeamStatus = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiContestsIdTeamStatusHook>>>, TError = ErrorType<ProblemDetails>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiContestsIdTeamStatusHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiContestsIdTeamStatusQueryKey(id);

  const getApiContestsIdTeamStatus =  useGetApiContestsIdTeamStatusHook();


  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiContestsIdTeamStatusHook>>>> = ({ signal }) => getApiContestsIdTeamStatus(id, signal);


  

  const query = useQuery<Awaited<ReturnType<ReturnType<typeof useGetApiContestsIdTeamStatusHook>>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const useGetApiContestsIdExerciseHook = () => {
        const getApiContestsIdExercise = useCustomClient<void>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return getApiContestsIdExercise(
          {url: `/Api/Contests/${id}/Exercise`, method: 'get', signal
    },
          );
        }
      }
    

export const getGetApiContestsIdExerciseQueryKey = (id: number,) => [`/Api/Contests/${id}/Exercise`];

    
export type GetApiContestsIdExerciseQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiContestsIdExerciseHook>>>>
export type GetApiContestsIdExerciseQueryError = ErrorType<ProblemDetails>

export const useGetApiContestsIdExercise = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiContestsIdExerciseHook>>>, TError = ErrorType<ProblemDetails>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiContestsIdExerciseHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiContestsIdExerciseQueryKey(id);

  const getApiContestsIdExercise =  useGetApiContestsIdExerciseHook();


  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiContestsIdExerciseHook>>>> = ({ signal }) => getApiContestsIdExercise(id, signal);


  

  const query = useQuery<Awaited<ReturnType<ReturnType<typeof useGetApiContestsIdExerciseHook>>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const useGetApiContestsIdTopicHelpHook = () => {
        const getApiContestsIdTopicHelp = useCustomClient<void>();

        return (
    id: number,
 signal?: AbortSignal
) => {
        return getApiContestsIdTopicHelp(
          {url: `/Api/Contests/${id}/TopicHelp`, method: 'get', signal
    },
          );
        }
      }
    

export const getGetApiContestsIdTopicHelpQueryKey = (id: number,) => [`/Api/Contests/${id}/TopicHelp`];

    
export type GetApiContestsIdTopicHelpQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiContestsIdTopicHelpHook>>>>
export type GetApiContestsIdTopicHelpQueryError = ErrorType<ProblemDetails>

export const useGetApiContestsIdTopicHelp = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiContestsIdTopicHelpHook>>>, TError = ErrorType<ProblemDetails>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiContestsIdTopicHelpHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiContestsIdTopicHelpQueryKey(id);

  const getApiContestsIdTopicHelp =  useGetApiContestsIdTopicHelpHook();


  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiContestsIdTopicHelpHook>>>> = ({ signal }) => getApiContestsIdTopicHelp(id, signal);


  

  const query = useQuery<Awaited<ReturnType<ReturnType<typeof useGetApiContestsIdTopicHelpHook>>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

