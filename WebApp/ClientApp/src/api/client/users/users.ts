/**
 * Generated by orval v6.11.1 🍺
 * Do not edit manually.
 * WebApp
 * OpenAPI spec version: v1
 */
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  IndexUsersResponse,
  GetApiUsersParams,
  ViewUserResponse,
  ProblemDetails,
  CreateUserRequest,
  PostApiUsersParams,
  UpdateUserRequest
} from '.././model'
import { useCustomClient } from '.././customClient';
import type { ErrorType, BodyType } from '.././customClient';


export const useGetApiUsersHook = () => {
        const getApiUsers = useCustomClient<IndexUsersResponse[]>();

        return (
    params?: GetApiUsersParams,
 signal?: AbortSignal
) => {
        return getApiUsers(
          {url: `/Api/Users`, method: 'get',
        params, signal
    },
          );
        }
      }
    

export const getGetApiUsersQueryKey = (params?: GetApiUsersParams,) => [`/Api/Users`, ...(params ? [params]: [])];

    
export type GetApiUsersQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiUsersHook>>>>
export type GetApiUsersQueryError = ErrorType<unknown>

export const useGetApiUsers = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiUsersHook>>>, TError = ErrorType<unknown>>(
 params?: GetApiUsersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsersHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsersQueryKey(params);

  const getApiUsers =  useGetApiUsersHook();


  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiUsersHook>>>> = ({ signal }) => getApiUsers(params, signal);


  

  const query = useQuery<Awaited<ReturnType<ReturnType<typeof useGetApiUsersHook>>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const usePostApiUsersHook = () => {
        const postApiUsers = useCustomClient<ViewUserResponse>();

        return (
    createUserRequest: BodyType<CreateUserRequest>,
    params?: PostApiUsersParams,
 ) => {
        return postApiUsers(
          {url: `/Api/Users`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createUserRequest,
        params
    },
          );
        }
      }
    


    export type PostApiUsersMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePostApiUsersHook>>>>
    export type PostApiUsersMutationBody = BodyType<CreateUserRequest>
    export type PostApiUsersMutationError = ErrorType<ProblemDetails>

    export const usePostApiUsers = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePostApiUsersHook>>>, TError,{data: BodyType<CreateUserRequest>;params?: PostApiUsersParams}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      const postApiUsers =  usePostApiUsersHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePostApiUsersHook>>>, {data: BodyType<CreateUserRequest>;params?: PostApiUsersParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postApiUsers(data,params,)
        }

        

      return useMutation<Awaited<ReturnType<typeof postApiUsers>>, TError, {data: BodyType<CreateUserRequest>;params?: PostApiUsersParams}, TContext>(mutationFn, mutationOptions);
    }
    export const useGetApiUsersIdHook = () => {
        const getApiUsersId = useCustomClient<ViewUserResponse>();

        return (
    id: string,
 signal?: AbortSignal
) => {
        return getApiUsersId(
          {url: `/Api/Users/${id}`, method: 'get', signal
    },
          );
        }
      }
    

export const getGetApiUsersIdQueryKey = (id: string,) => [`/Api/Users/${id}`];

    
export type GetApiUsersIdQueryResult = NonNullable<Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>>
export type GetApiUsersIdQueryError = ErrorType<ProblemDetails>

export const useGetApiUsersId = <TData = Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>, TError = ErrorType<ProblemDetails>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsersIdQueryKey(id);

  const getApiUsersId =  useGetApiUsersIdHook();


  const queryFn: QueryFunction<Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>> = ({ signal }) => getApiUsersId(id, signal);


  

  const query = useQuery<Awaited<ReturnType<ReturnType<typeof useGetApiUsersIdHook>>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const usePatchApiUsersIdHook = () => {
        const patchApiUsersId = useCustomClient<void>();

        return (
    id: string,
    updateUserRequest: BodyType<UpdateUserRequest>,
 ) => {
        return patchApiUsersId(
          {url: `/Api/Users/${id}`, method: 'patch',
      headers: {'Content-Type': 'application/json', },
      data: updateUserRequest
    },
          );
        }
      }
    


    export type PatchApiUsersIdMutationResult = NonNullable<Awaited<ReturnType<ReturnType<typeof usePatchApiUsersIdHook>>>>
    export type PatchApiUsersIdMutationBody = BodyType<UpdateUserRequest>
    export type PatchApiUsersIdMutationError = ErrorType<ProblemDetails>

    export const usePatchApiUsersId = <TError = ErrorType<ProblemDetails>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<ReturnType<typeof usePatchApiUsersIdHook>>>, TError,{id: string;data: BodyType<UpdateUserRequest>}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {};

      const patchApiUsersId =  usePatchApiUsersIdHook()


      const mutationFn: MutationFunction<Awaited<ReturnType<ReturnType<typeof usePatchApiUsersIdHook>>>, {id: string;data: BodyType<UpdateUserRequest>}> = (props) => {
          const {id,data} = props ?? {};

          return  patchApiUsersId(id,data,)
        }

        

      return useMutation<Awaited<ReturnType<typeof patchApiUsersId>>, TError, {id: string;data: BodyType<UpdateUserRequest>}, TContext>(mutationFn, mutationOptions);
    }
    